{-# LANGUAGE DataKinds #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE TypeOperators #-}

{-# OPTIONS_GHC -fno-warn-orphans #-}
-- | This module contains definitions that correspond to the camera
-- bounding box type generated by the AADL model. Ideally, we would
-- consume the output of these tools directly, but keeping these in
-- sync and providing conversions to the types we use internally
-- works.
module SMACCMTypes.Camera (to_smaccm, from_smaccm) where

import Ivory.Language

import Ivory.Tower

import Tower.Odroid.CameraVM

{-
typedef
      struct SMACCM_DATA__Camera_Bounding_Box_i {
         uint16_t left  ;
         uint16_t right  ;
         uint16_t top  ;
         uint16_t bottom  ;
      } SMACCM_DATA__Camera_Bounding_Box_i ;
-}

smaccm_camera_module :: Module
smaccm_camera_module = package "smaccm_camera_module" $ do
  dependByName "tb_smaccmcopter_types"

[ivory|
struct SMACCM_DATA__Camera_Bounding_Box_i
  { left   :: Uint16
  ; right  :: Uint16
  ; top    :: Uint16
  ; bottom :: Uint16
  }
|]

from_smaccm ::
     ChanOutput ('Struct "SMACCM_DATA__Camera_Bounding_Box_i")
  -> Tower eff (ChanOutput ('Struct "camera_data"))
from_smaccm smaccm_in = do
  towerDepends smaccm_camera_module
  towerModule  smaccm_camera_module
  towerDepends cameraVMModule
  towerModule  cameraVMModule
  camera_data_out <- channel
  monitor "from_smaccm_camera" $ do
    handler smaccm_in "from_smaccm_camera" $ do
      e <- emitter (fst camera_data_out) 1
      callback $ \smaccm -> do
        smaccm_left   <- deref (smaccm ~> left)
        smaccm_right  <- deref (smaccm ~> right)
        smaccm_top    <- deref (smaccm ~> top)
        smaccm_bottom <- deref (smaccm ~> bottom)
        camera_data <- local $ istruct [
            bbox_l .= (ival smaccm_left)
          , bbox_r .= (ival smaccm_right)
          , bbox_t .= (ival smaccm_top)
          , bbox_b .= (ival smaccm_bottom)
          ]
        emit e (constRef camera_data)
  return (snd camera_data_out)

to_smaccm ::
     ChanInput ('Struct "SMACCM_DATA__Camera_Bounding_Box_i")
  -> Tower eff (ChanInput ('Struct "camera_data"))
to_smaccm smaccm_out = do
  towerDepends smaccm_camera_module
  towerModule  smaccm_camera_module
  towerDepends cameraVMModule
  towerModule  cameraVMModule
  camera_data_out <- channel
  monitor "to_smaccm_camera" $ do
    handler (snd camera_data_out) "to_smaccm_camera" $ do
      e <- emitter smaccm_out 1
      callback $ \camera_data -> do
        data_left   <- deref (camera_data ~> bbox_l)
        data_right  <- deref (camera_data ~> bbox_r)
        data_top    <- deref (camera_data ~> bbox_t)
        data_bottom <- deref (camera_data ~> bbox_b)
        smaccm <- local $ istruct [
            left   .= (ival data_left)
          , right  .= (ival data_right)
          , top    .= (ival data_top)
          , bottom .= (ival data_bottom)
          ]
        emit e (constRef smaccm)
  return (fst camera_data_out)
